


## HigherOrderFunction

imperatywne opisuje w jaki sposob jest coś robione, pętle for itp
deklaratywne skupia się co chcemy zrobić, metody np reduce mowi co jest do zrobienia.

const shortestReducer = (prev , next) => prev.duration < next.duration ? prev : next;
const shortest = songs.reduce(shortestReducer, songs)



## PureFunctions
// Non-pure
const convertPlayTime = (games) => {
    games.forEach((game) => (game.playtime = toHour(game.playtime)))
    return games
}

// Pure
const convertPlayTime = (games) => {
    return games.map((game) => ({ ...game, playtime: toHour(game.playtime)}))
}



## CompositionOverInheritance
//Inheritance

class Media {
    record() {}
    share() {}
}

class Movie extends Media {
    watch() {}
}

class Podcast extends Media{
    listen() {}
}

class Resource {
    share() {}
}

class Newsletter extends Resource {
    write() {}
    read() {}
}

class Snippet extends Resource {
    gather() {}
}


// Composition
const recordable = (state) => ({
    record: () => `I'm recording a new ${state.type}!`
});

const shareable = (state) => ({
    share: () => `I'm shareing a ${state.name}!`
});

const watchable = (state) => ({
    watch: () => `I'm watching a ${state.name}!`
});

//factory function
const movie = (name) => {
    const state = {name: name, type: 'movie'};
    return Object.assign({}, recordable(state), shareable(state), watchable(state))
}

const latestMovie = movie("Kompozycja vs. dziedziczenie")
latestMovie.record();
latestMovie.share();
console.log(latestMovie.watch());




## Function composition

const bookshelf = [
    {title: "aaa", pages: 1, genre: "it"},
    {title: "bbb", pages: 10, genre: "it"},
    {title: "ccc", pages: 100, genre: "bluetooth"},
    {title: "ddd", pages: 1000, genre: "it"},
    {title: "eee", pages: 10000, genre: "it"},
]

const compose = (...fns) => (x) => fns.reduceRight((acc, fn) => fn(acc), x)

const getBusiness = (list) => list.filter((book) => book.genre === 'it')
const getPages = (list) => list.map(({pages}) => pages)
const countPages = (book) => book.reduce((acc, pages) => acc + pages)

const buisness = compose(countPages, getPages, getBusiness)
console.log(buisness(bookshelf))

console.log(compose(countPages, getPages, getBusiness)(bookshelf))//skrócony zapis


## Curring


// Problem
const numbers = [44, 3, 84, 23];
function multiply(value, multiplier) {
    return value * multiplier
}
// Partial Application
const double = multiply.bind(null , 2);
double(5);
console.log(numbers.map(double))


//Unary & binary
const unary = (x) => console.log(x);
const binary = (x, y) => x + y;

const binToUnrFunc = function (x) {
    return function (y) {
        return x + y;
    }
}

//Curring
const unaryCurring = (x) => (y) => x + y;
unaryCurring(1);
unaryCurring(1)(2);


## shared state
// Timing
const account = {balance: 2}

const add = (acc) => (acc.balance += 1)
const multiply = (acc) => (acc.balance *= 2)

//zalezny od kolejności
add(account)
multiply(account)

console.log(account)




## Factory PureFunctions
const list











